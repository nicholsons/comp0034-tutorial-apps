from flask import Blueprint, render_template
from sqlalchemy import func

from flask_para import db
from flask_para.models import AnswerChoice, Event, Question, Quiz, QuizQuestion, StudentResponse

main = Blueprint('main', __name__)


@main.route('/')
def index():
    return render_template('index.html')


@main.route('/get-event/', defaults={'event_id': 1})
@main.route('/get-event/<int:event_id>')
def get_event(event_id):
    """Get event by event_id
    If an event_id is not provided, the first event is returned by default.
    If an invalid event_id is provided, a 404 error is returned.
    """
    # https://flask-sqlalchemy.readthedocs.io/en/stable/api/#flask_sqlalchemy.SQLAlchemy.get_or_404
    # same as salar_one but returns a 404 error if no results are found
    event = db.get_or_404(
        Event, event_id,
        description=f"No event with id '{event_id}'."
    )
    result = f"Event with id: {event.event_id} in year: {event.year}"
    return result


@main.route('/get-events')
def get_events():
    """Get all events and print their ids and years"""
    events = db.session.execute(db.select(Event)).scalars()
    result = []
    for event in events:
        result.append(f"Event with id: {event.event_id} in year: {event.year}")
    return result


@main.route('/add-sample-quiz-data')
def add_sample_quiz_data():
    """
    Add sample data to the Quiz, Question, QuizQuestion, and AnswerChoice tables.
    You would not typically add data like this in a production application as it adds the same data each time.
    This is just to demonstrate how to add data to the tables using relationships.
    """
    # Create a Quiz object
    quiz = Quiz(quiz_name="Dummy quiz")

    # Create a Question
    question = Question(question="In what year was the summer paralympics last held in Barcelona?")

    # Create a QuizQuestion
    quiz_question = QuizQuestion()

    # Creat an AnswerChoice
    ans = AnswerChoice(choice_text="1992", choice_value=5, is_correct=True)

    # The QuizQuestion is associated with the Quiz and Question tables by their relationship attribute,
    # called 'quiz_questions' in both cases
    quiz.quiz_questions.append(quiz_question)
    question.quiz_questions.append(quiz_question)
    # The answer choice is related to the question using the relationship that has been defined as 'answer_choices'
    question.answer_choices.append(ans)

    # Due to the relationships, adding the quiz will add the associated objects as well
    db.session.add(quiz)
    db.session.commit()

    # Check that there is now at least one row in each of the tables
    for table in [Quiz, Question, QuizQuestion, AnswerChoice]:
        count_query = db.select(func.count()).select_from(table)
        if db.session.execute(count_query).scalar() == 0:
            return f"Failed to add data to {table} table."
    return "Data added"


@main.route('/save-student-response')
def save_student_response():
    """Save a student response to the database.

    In practice the values for the score, email etc would be generated by the app

    This is just a simple function to illustrate saving a student response.

    Note: you could get the quiz object and then use the relationship to save it
    However, this example shows how to save the response directly using the quiz_id.
    """
    quiz_id = 1
    student_email = "some.student@studentsmail.com"
    score = 5
    student_response = StudentResponse(quiz_id=quiz_id, student_email=student_email, score=score)
    db.session.add(student_response)
    db.session.commit()
    response_id = student_response.response_id
    return f"Response saved with id: {response_id}"


@main.route('/delete-response/<response_id>')
def delete_response(response_id):
    """Delete a student response from the database."""
    response = db.get_or_404(StudentResponse, response_id)
    db.session.delete(response)
    db.session.commit()
    return f"Response with id {response_id} deleted."


@main.route('/update-quiz/<quiz_id>/<close_date>')
def update_quiz(quiz_id, close_date):
    """Update the close date for a quiz."""
    quiz = db.get_or_404(Quiz, quiz_id)
    quiz.close_date = close_date
    db.session.commit()
    return f"Quiz with id {quiz_id} updated with close date {close_date}"
